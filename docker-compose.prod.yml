version: '3.8'

services:
  # PostgreSQL Database for Production
  db:
    image: postgres:15-alpine
    container_name: news_app_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-newsapp_prod}
      POSTGRES_USER: ${DB_USER:-newsapp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-newsapp_user} -d ${DB_NAME:-newsapp_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: news_app_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_me}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      target: production
    container_name: news_app_web_prod
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_NAME: ${DB_NAME:-newsapp_prod}
      DB_USER: ${DB_USER:-newsapp_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      DB_HOST: db
      DB_PORT: 5432
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/1
      
      # Django Configuration
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Security Settings
      SECURE_SSL_REDIRECT: "True"
      SECURE_PROXY_SSL_HEADER: "HTTP_X_FORWARDED_PROTO,https"
      SECURE_HSTS_SECONDS: "31536000"
      SECURE_HSTS_INCLUDE_SUBDOMAINS: "True"
      SECURE_CONTENT_TYPE_NOSNIFF: "True"
      SECURE_BROWSER_XSS_FILTER: "True"
      
      # Email Configuration
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@yourdomain.com}
      
      # Twitter API Configuration
      TWITTER_CLIENT_ID: ${TWITTER_CLIENT_ID}
      TWITTER_CLIENT_SECRET: ${TWITTER_CLIENT_SECRET}
      TWITTER_REDIRECT_URI: ${TWITTER_REDIRECT_URI:-https://yourdomain.com/accounts/twitter/callback/}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: gunicorn news_app.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --max-requests-jitter 100 --preload

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: news_app_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs_volume:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker (for background tasks)
  celery:
    build:
      context: .
      target: production
    container_name: news_app_celery_prod
    restart: unless-stopped
    environment:
      # Same environment as web service
      DB_NAME: ${DB_NAME:-newsapp_prod}
      DB_USER: ${DB_USER:-newsapp_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/1
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    networks:
      - app-network
    depends_on:
      - db
      - redis
    command: celery -A news_app worker --loglevel=info --concurrency=2

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      target: production
    container_name: news_app_celery_beat_prod
    restart: unless-stopped
    environment:
      # Same environment as web service
      DB_NAME: ${DB_NAME:-newsapp_prod}
      DB_USER: ${DB_USER:-newsapp_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/1
      DEBUG: "False"
      SECRET_KEY: ${SECRET_KEY:-change-this-secret-key-in-production}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password_change_me}@redis:6379/0
    volumes:
      - logs_volume:/app/logs
    networks:
      - app-network
    depends_on:
      - db
      - redis
    command: celery -A news_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  app-network:
    driver: bridge
